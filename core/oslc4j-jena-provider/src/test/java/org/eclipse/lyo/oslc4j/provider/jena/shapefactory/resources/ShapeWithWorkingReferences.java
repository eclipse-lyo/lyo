// Start of user code Copyright
/*
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Distribution License 1.0 which is available at
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * SPDX-License-Identifier: BSD-3-Simple
 *
 * This file is generated by Lyo Designer (https://www.eclipse.org/lyo/)
 */
// End of user code

package org.eclipse.lyo.oslc4j.provider.jena.shapefactory.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import java.util.Iterator;

import org.eclipse.lyo.oslc4j.core.OSLC4JUtils;
import org.eclipse.lyo.oslc4j.core.exception.OslcCoreApplicationException;
import org.eclipse.lyo.oslc4j.core.annotation.OslcAllowedValue;
import org.eclipse.lyo.oslc4j.core.annotation.OslcDescription;
import org.eclipse.lyo.oslc4j.core.annotation.OslcMemberProperty;
import org.eclipse.lyo.oslc4j.core.annotation.OslcName;
import org.eclipse.lyo.oslc4j.core.annotation.OslcNamespace;
import org.eclipse.lyo.oslc4j.core.annotation.OslcOccurs;
import org.eclipse.lyo.oslc4j.core.annotation.OslcPropertyDefinition;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRdfCollectionType;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRange;
import org.eclipse.lyo.oslc4j.core.annotation.OslcReadOnly;
import org.eclipse.lyo.oslc4j.core.annotation.OslcRepresentation;
import org.eclipse.lyo.oslc4j.core.annotation.OslcResourceShape;
import org.eclipse.lyo.oslc4j.core.annotation.OslcTitle;
import org.eclipse.lyo.oslc4j.core.annotation.OslcValueType;
import org.eclipse.lyo.oslc4j.core.model.AbstractResource;
import org.eclipse.lyo.oslc4j.core.model.Link;
import org.eclipse.lyo.oslc4j.core.model.Occurs;
import org.eclipse.lyo.oslc4j.core.model.OslcConstants;
import org.eclipse.lyo.oslc4j.core.model.Representation;
import org.eclipse.lyo.oslc4j.core.model.ValueType;
import org.eclipse.lyo.oslc4j.provider.jena.shapefactory.resources.InlinedShape;
import org.eclipse.lyo.oslc4j.provider.jena.shapefactory.resources.LocalShape;
import org.eclipse.lyo.oslc4j.provider.jena.shapefactory.resources.Oslc_sdDomainConstants;
import org.eclipse.lyo.oslc4j.provider.jena.shapefactory.resources.ReferencedShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShape;
import org.eclipse.lyo.oslc4j.core.model.ResourceShapeFactory;

// Start of user code preClassCode
// End of user code

// Start of user code classAnnotations
// End of user code
@OslcNamespace(Oslc_sdDomainConstants.SHAPEWITHWORKINGREFERENCES_NAMESPACE)
@OslcName(Oslc_sdDomainConstants.SHAPEWITHWORKINGREFERENCES_LOCALNAME)
@OslcResourceShape(title = "ShapeWithWorkingReferences Resource Shape", describes = Oslc_sdDomainConstants.SHAPEWITHWORKINGREFERENCES_TYPE)
public class ShapeWithWorkingReferences
    extends AbstractResource
    implements IShapeWithWorkingReferences
{
    // Start of user code attributeAnnotation:referencesAsLocal
    // End of user code
    private LocalShape referencesAsLocal;
    // Start of user code attributeAnnotation:inlines
    // End of user code
    private InlinedShape inlines;
    // Start of user code attributeAnnotation:referencesAsResource
    // End of user code
    private Link referencesAsResource;
    // Start of user code attributeAnnotation:identifier
    // End of user code
    private String identifier;
    // Start of user code attributeAnnotation:inlinesMany
    // End of user code
    private Set<InlinedShape> inlinesMany = new HashSet<>();

    // Start of user code classAttributes
    // End of user code
    // Start of user code classMethods
    // End of user code
    public ShapeWithWorkingReferences()
    {
        super();

        // Start of user code constructor1
        // End of user code
    }

    public ShapeWithWorkingReferences(final URI about)
    {
        super(about);

        // Start of user code constructor2
        // End of user code
    }

    public static ResourceShape createResourceShape() throws OslcCoreApplicationException, URISyntaxException {
        return ResourceShapeFactory.createResourceShape(OSLC4JUtils.getServletURI(),
        OslcConstants.PATH_RESOURCE_SHAPES,
        Oslc_sdDomainConstants.SHAPEWITHWORKINGREFERENCES_PATH,
        ShapeWithWorkingReferences.class);
    }


    public String toString()
    {
        return toString(false);
    }

    public String toString(boolean asLocalResource)
    {
        String result = "";
        // Start of user code toString_init
        // End of user code

        if (asLocalResource) {
            result = result + "{a Local ShapeWithWorkingReferences Resource} - update ShapeWithWorkingReferences.toString() to present resource as desired.";
            // Start of user code toString_bodyForLocalResource
            // End of user code
        }
        else {
            result = String.valueOf(getAbout());
        }

        // Start of user code toString_finalize
        // End of user code

        return result;
    }

    public void addInlinesMany(final InlinedShape inlinesMany)
    {
        this.inlinesMany.add(inlinesMany);
    }


    // Start of user code getterAnnotation:referencesAsLocal
    // End of user code
    @OslcName("referencesAsLocal")
    @OslcPropertyDefinition(Oslc_sdDomainConstants.SPECDOMAIN_NAMSPACE + "referencesAsLocal")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.LocalResource)
    @OslcRange({Oslc_sdDomainConstants.LOCALSHAPE_TYPE})
    @OslcReadOnly(false)
    public LocalShape getReferencesAsLocal()
    {
        // Start of user code getterInit:referencesAsLocal
        // End of user code
        return referencesAsLocal;
    }

    // Start of user code getterAnnotation:inlines
    // End of user code
    @OslcName("inlines")
    @OslcPropertyDefinition(Oslc_sdDomainConstants.SPECDOMAIN_NAMSPACE + "inlines")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRepresentation(Representation.Inline)
    @OslcRange({Oslc_sdDomainConstants.INLINEDSHAPE_TYPE})
    @OslcReadOnly(false)
    public InlinedShape getInlines()
    {
        // Start of user code getterInit:inlines
        // End of user code
        return inlines;
    }

    // Start of user code getterAnnotation:referencesAsResource
    // End of user code
    @OslcName("referencesAsResource")
    @OslcPropertyDefinition(Oslc_sdDomainConstants.SPECDOMAIN_NAMSPACE + "referencesAsResource")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.Resource)
    @OslcRange({Oslc_sdDomainConstants.REFERENCEDSHAPE_TYPE})
    @OslcReadOnly(false)
    public Link getReferencesAsResource()
    {
        // Start of user code getterInit:referencesAsResource
        // End of user code
        return referencesAsResource;
    }

    // Start of user code getterAnnotation:identifier
    // End of user code
    @OslcName("identifier")
    @OslcPropertyDefinition(Oslc_sdDomainConstants.SPECDOMAIN_NAMSPACE + "identifier")
    @OslcOccurs(Occurs.ExactlyOne)
    @OslcValueType(ValueType.String)
    @OslcReadOnly(false)
    public String getIdentifier()
    {
        // Start of user code getterInit:identifier
        // End of user code
        return identifier;
    }

    // Start of user code getterAnnotation:inlinesMany
    // End of user code
    @OslcName("inlinesMany")
    @OslcPropertyDefinition(Oslc_sdDomainConstants.SPECDOMAIN_NAMSPACE + "inlinesMany")
    @OslcOccurs(Occurs.ZeroOrMany)
    @OslcValueType(ValueType.Resource)
    @OslcRepresentation(Representation.Inline)
    @OslcRange({Oslc_sdDomainConstants.INLINEDSHAPE_TYPE})
    @OslcReadOnly(false)
    public Set<InlinedShape> getInlinesMany()
    {
        // Start of user code getterInit:inlinesMany
        // End of user code
        return inlinesMany;
    }


    // Start of user code setterAnnotation:referencesAsLocal
    // End of user code
    public void setReferencesAsLocal(final LocalShape referencesAsLocal )
    {
        // Start of user code setterInit:referencesAsLocal
        // End of user code
        this.referencesAsLocal = referencesAsLocal;

        // Start of user code setterFinalize:referencesAsLocal
        // End of user code
    }

    // Start of user code setterAnnotation:inlines
    // End of user code
    public void setInlines(final InlinedShape inlines )
    {
        // Start of user code setterInit:inlines
        // End of user code
        this.inlines = inlines;

        // Start of user code setterFinalize:inlines
        // End of user code
    }

    // Start of user code setterAnnotation:referencesAsResource
    // End of user code
    public void setReferencesAsResource(final Link referencesAsResource )
    {
        // Start of user code setterInit:referencesAsResource
        // End of user code
        this.referencesAsResource = referencesAsResource;

        // Start of user code setterFinalize:referencesAsResource
        // End of user code
    }

    // Start of user code setterAnnotation:identifier
    // End of user code
    public void setIdentifier(final String identifier )
    {
        // Start of user code setterInit:identifier
        // End of user code
        this.identifier = identifier;

        // Start of user code setterFinalize:identifier
        // End of user code
    }

    // Start of user code setterAnnotation:inlinesMany
    // End of user code
    public void setInlinesMany(final Set<InlinedShape> inlinesMany )
    {
        // Start of user code setterInit:inlinesMany
        // End of user code
        this.inlinesMany.clear();
        if (inlinesMany != null)
        {
            this.inlinesMany.addAll(inlinesMany);
        }

        // Start of user code setterFinalize:inlinesMany
        // End of user code
    }


}
